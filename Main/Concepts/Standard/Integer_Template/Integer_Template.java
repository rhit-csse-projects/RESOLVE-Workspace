/*
 * This softare is released under the new BSD 2006 license.
 * 
 * Note the new BSD license is equivalent to the MIT License, except for the
 * no-endorsement final clause.
 * 
 * Copyright (c) 2007, Clemson University
 * 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer. 
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution. 
 *   * Neither the name of the Clemson University nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 * This sofware has been developed by past and present members of the
 * Reusable Sofware Research Group (RSRG) in the School of Computing at
 * Clemson University.  Contributors to the initial version are:
 * 
 *     Steven Atkinson
 *     Greg Kulczycki
 *     Kunal Chopra
 *     John Hunt
 *     Heather Keown
 *     Ben Markle
 *     Kim Roche
 *     Murali Sitaraman
 */

//
// Generated by the Resolve to Java Translator
// from file:  Integer_Template.co
// on:         Wed Jun 21 16:15:34 EDT 2006
//
package RESOLVE.Main.Concepts.Standard.Integer_Template; 
 
import RESOLVE.*;
import RESOLVE.Main.Concepts.Standard.Boolean_Template.*;

public interface Integer_Template extends RESOLVE_INTERFACE {

	public interface Integer extends RType {
	}

	Boolean_Template.Boolean Is_Zero(Integer_Template.Integer i);
	Boolean_Template.Boolean Is_Not_Zero(Integer_Template.Integer i);
	void Increment(Integer_Template.Integer i);
	void Decrement(Integer_Template.Integer i);
	Boolean_Template.Boolean Less_Or_Equal(Integer_Template.Integer i, Integer_Template.Integer j);
	Boolean_Template.Boolean Less(Integer_Template.Integer i, Integer_Template.Integer j);
	Boolean_Template.Boolean Greater(Integer_Template.Integer i, Integer_Template.Integer j);
	Boolean_Template.Boolean Greater_Or_Equal(Integer_Template.Integer i, Integer_Template.Integer j);
	Integer_Template.Integer Sum(Integer_Template.Integer i, Integer_Template.Integer j);
	Integer_Template.Integer Negate(Integer_Template.Integer i);
	Integer_Template.Integer Difference(Integer_Template.Integer i, Integer_Template.Integer j);
	Integer_Template.Integer Product(Integer_Template.Integer i, Integer_Template.Integer j);
	Integer_Template.Integer Power(Integer_Template.Integer i, Integer_Template.Integer j);
	void Divide(Integer_Template.Integer i, Integer_Template.Integer j, Integer_Template.Integer q);
	Integer_Template.Integer Mod(Integer_Template.Integer i, Integer_Template.Integer j);
	Integer_Template.Integer Rem(Integer_Template.Integer i, Integer_Template.Integer j);
  	public Integer_Template.Integer Quotient(Integer_Template.Integer i1, Integer_Template.Integer i2);
  	public Integer_Template.Integer Div(Integer_Template.Integer i1, Integer_Template.Integer i2);
	Boolean_Template.Boolean Are_Equal(Integer_Template.Integer i, Integer_Template.Integer j);
	Boolean_Template.Boolean Are_Not_Equal(Integer_Template.Integer i, Integer_Template.Integer j);
	Integer_Template.Integer Replica(Integer_Template.Integer i);
	void Read(Integer_Template.Integer i);
	void Write(Integer_Template.Integer i);
	void Write_Line(Integer_Template.Integer i);
	Integer_Template.Integer Max_Int();
	Integer_Template.Integer Min_Int();
	void Clear(Integer_Template.Integer i);
	Integer createInteger();
    Integer createInteger(int i);
}
